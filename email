exports.send_invoicemail = async (req, res, next) => {
  try {
    logger.info("Send a invoice mail Req Recieved", {
      username: res.locals.username,
      reqdetails: "Invoice",
    });
  
    const {
      username,
      useremail,
      mailto,
      attachmentName,
      attachmentLink,
      attachmentBase64,
    } = req.body;

    let base64data;

    if (attachmentLink) {
      let filepath = `./upload/${attachmentName}`;    

      const response = await realaxiosinstance.get(attachmentLink, {
       responseType: "stream",      });
      const claimdatapdf = await response.data;
        const file=claimdatapdf.pipe(fs.createWriteStream(filepath));
        await writeableStream(file)
        const data = fs.readFileSync(filepath);
        base64data = data.toString("base64")
        
    }


    function writeableStream(file){
      return new Promise((resolve, reject) => {
        //const file = fs.createWriteStream(filePath);            
        file.on("finish", () => { 
          //console.log("Triggered");
          resolve(true); 
        }); // not sure why you want to pass a boolean
        file.on("error",()=>{
          reject(false)
        }); // don't forget this!
        //file.end();
      });
    }


or else directly convert attachmentlink into buffer and buffer into base 64 instaead of storing in a folder

 let base64data;

      if (attachmentLink) {
         const response = await realaxiosinstance.get(attachmentLink, {
            responseType: "arraybuffer",
            responseEncoding: "binary",
            headers: {
               "Content-Type": "application/pdf",
            },
         });
         base64data = Buffer.from(response.data).toString("base64");
      }
      
      ====================






    var data = {
      to: req.body.mailto,
      from: mailconfig.fromEmail,
      // template: "forgot-password-email",
      subject: req.body.mailsub,
      // message: req.body.mailmessage,
      attachments: [
        {
          filename: req.body.attachmentName,
          content: req.body.attachmentBase64
            ? req.body.attachmentBase64
            : base64data,
          encoding: 'base64',
        },
      ],
      html:
      "Hello <b>" +
        "Sir" +
        // " " +
        // lastname +
        "</b>," +
        "<br/><br/><br/>" +
        req.body.mailmessage +
        " <br/><br/>If you haven't requested this, please ignore this email.<br/><br/><br/> <b>Thanks,</b><br/><br/>Ryzeclaims Team.",
    };

    const mail_response = await mail.mailSend(data);

    if (mail_response) {
      let filepath = "./upload/";
      fs.readdir(filepath, (err, files) => {
        if (err) throw err;
        for (const file of files) {
          fs.unlink(path.join(filepath, file), (err) => {
            if (err) throw err;
          });
        }
      });

      logger.info("Invoice Mail Sent", {
        // username: firstname + " " + lastname,
        reqdetails: "Invoice",
      });
      return res.json({
        status: true,
        message: "Kindly check your email for further instructions",
      });
    } else {
      logger.error("There is some internal issue", {
        // username: firstname + " " + lastname,
        reqdetails: "Invoice",
      });
      return res.json({ message: "There is some internal issue" });
    }

  
  } catch (error) {
    next(error);
  }
};
